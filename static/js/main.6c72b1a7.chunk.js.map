{"version":3,"sources":["components/Map.js","App.js","serviceWorker.js","index.js"],"names":["Map","props","setViewport","bind","hoverHandler","state","mapData","width","height","latitude","longitude","zoom","mapStyle","mapOptions","hash","onHover","onViewportChange","geolocateControlData","style","position","top","left","margin","popupData","closeButton","hoveredFeature","loaded","sourceData","layerData","id","type","filter","paint","viewport","bearing","pitch","this","setState","properties","value","country","province","event","features","lngLat","find","f","layer","fetch","res","ok","json","locations","map","item","latest","geometry","coordinates","long","lat","geojson","data","loadData","trackUserLocation","renderSource","renderTooltip","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"iVAIaA,EAAb,YACE,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,YAAc,EAAKA,YAAYC,KAAjB,gBACnB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBAEpB,EAAKE,MAAQ,CACXC,QAAS,CACPC,MAAO,QACPC,OAAQ,QACRC,SAAU,OACVC,UAAW,OACXC,KAAM,EACNC,SAAU,sDACVC,WAAY,CAACC,MAAM,GACnBC,QAAS,EAAKX,aACdY,iBAAkB,EAAKd,aAEzBe,qBAAsB,CACpBC,MAAO,CACLC,SAAU,WACVC,IAAK,EACLC,KAAM,EACNC,OAAQ,KAGZC,UAAW,CACTd,SAAU,KACVC,UAAW,KACXc,aAAa,GAEfC,eAAgB,KAChBC,QAAQ,EACRC,WAAY,GACZC,UAAW,CACTC,GAAI,SACJC,KAAM,SACNC,OAAQ,CAAC,IAAK,CAAC,MAAO,SAAU,GAChCC,MAAO,CACL,eAAgB,CACd,OACA,CAAC,MAAO,SACR,mBACA,IACA,oBACA,IACA,mBAEF,gBAAiB,CACf,cAAe,CAAC,UAAW,CAAC,QAC5B,EAAG,CAAC,MAAO,CAAC,MAAO,CAAC,IAAK,CAAC,SAAU,CAAC,MAAO,UAAW,IAAK,GAAI,IAChE,GAAI,CAAC,MAAO,CAAC,MAAO,CAAC,IAAK,CAAC,SAAU,CAAC,MAAO,UAAW,KAAM,GAAI,SAlDzD,EADrB,yEAyDcC,GAAW,IACdxB,EAA6CwB,EAA7CxB,SAAUC,EAAmCuB,EAAnCvB,UAAWC,EAAwBsB,EAAxBtB,KAAMuB,EAAkBD,EAAlBC,QAASC,EAASF,EAATE,MAE3CC,KAAKC,SAAS,CACZ/B,QAAQ,eAAK8B,KAAK/B,MAAMC,QAAjB,CAA0BG,WAAUC,YAAWC,OAAMuB,UAASC,cA7D3E,qCAiEI,OACEC,KAAK/B,MAAMqB,QACX,kBAAC,IAAWU,KAAK/B,MAAMsB,WACrB,kBAAC,IAAUS,KAAK/B,MAAMuB,cApE9B,sCAwEmB,IACRH,EAAkBW,KAAK/B,MAAvBoB,eAEP,OACEA,GACE,kBAAC,IAAUW,KAAK/B,MAAMkB,UAClB,iDAAsB,2BAAIE,EAAea,WAAWC,QACpD,yCAAc,2BAAId,EAAea,WAAWE,UAC3Cf,EAAea,WAAWG,UAAY,uCAAY,2BAAIhB,EAAea,WAAWG,cAhF7F,mCAqFeC,GAAQ,IAEfC,EAEED,EAFFC,SAFc,cAIZD,EADFE,OAHc,GAGLlC,EAHK,KAGMD,EAHN,KAKhBgB,EAAiBkB,GAAYA,EAASE,MAAK,SAAAC,GAAC,MAAmB,WAAfA,EAAEC,MAAMlB,MAE1DO,KAAKC,SAAS,CAACZ,iBAAgBF,UAAU,eAAKa,KAAK/B,MAAMkB,UAAjB,CAA4Bb,YAAWD,iBA5FnF,uKA+FsBuC,MAAM,2DA/F5B,YA+FUC,EA/FV,QAkGYC,GAlGZ,gCAkG6BD,EAAIE,OAlGjC,OAkGgBA,EAlGhB,cAoGUR,EAAWQ,EAAKC,UAAUC,KAAI,SAAAC,GAAI,MAAK,CAACxB,KAAM,UAAWQ,WAAY,CAACC,OAAQe,EAAKC,OAAQf,QAASc,EAAKd,QAASC,SAAUa,EAAKb,UAAWe,SAAU,CAAC1B,KAAM,QAAS2B,YAAa,CAACH,EAAKG,YAAYC,KAAMJ,EAAKG,YAAYE,UAC5NC,EAAU,CACR9B,KAAM,oBACNa,YAGRP,KAAKC,SAAS,CACZV,WAAY,CACVG,KAAM,UACN+B,KAAMD,GAERlC,QAAQ,IA/Gd,gJAmHIU,KAAK0B,aAnHT,+BAsHI,OACE,kBAAC,IAAe1B,KAAK/B,MAAMC,QACzB,kBAAC,IAAD,eAAkByD,mBAAmB,GAAW3B,KAAK/B,MAAMY,uBAC1DmB,KAAK4B,eACL5B,KAAK6B,qBA1Hd,GAAyBC,IAAMC,WCKhBC,MANf,WACE,OACE,kBAAC,EAAD,OCOgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.6c72b1a7.chunk.js","sourcesContent":["/* eslint-disable */\nimport React from 'react'\nimport ReactMapGL, {GeolocateControl, Source, Layer, Popup, NavigationControl} from 'react-map-gl'\n\nexport class Map extends React.Component {\n  constructor(props) {\n    super(props)\n    this.setViewport = this.setViewport.bind(this)\n    this.hoverHandler = this.hoverHandler.bind(this)\n    \n    this.state = {\n      mapData: {\n        width: '100vw',\n        height: '100vh',\n        latitude: 54.247,\n        longitude: 21.117,\n        zoom: 1,\n        mapStyle: \"https://maps.seeker.info/styles/positron/style.json\",\n        mapOptions: {hash: false},\n        onHover: this.hoverHandler,\n        onViewportChange: this.setViewport\n      },\n      geolocateControlData: {\n        style: {\n          position: 'absolute',\n          top: 0, \n          left: 0, \n          margin: 12\n        }\n      },\n      popupData: {\n        latitude: null,\n        longitude: null,\n        closeButton: false\n      },\n      hoveredFeature: null,\n      loaded: false,\n      sourceData: {},\n      layerData: {\n        id: \"points\",\n        type: 'circle',\n        filter: ['>', ['get', 'value'], 0],\n        paint: {\n          'circle-color': [\n            'step',\n            ['get', 'value'],\n            'rgb(29, 168, 10)',\n            100,\n            'rgb(222, 198, 13)',\n            750,\n            'rgb(222, 41, 9)'\n          ],\n          'circle-radius': [\n            'interpolate', ['linear'], ['zoom'],\n            1, ['min', ['max', ['/', ['number', ['get', 'value']], 50], 4], 30],\n            13, ['min', ['max', ['/', ['number', ['get', 'value']], 100], 8], 400],\n          ]\n        }\n      }\n    }\n  }\n  setViewport(viewport) {\n    const {latitude, longitude, zoom, bearing, pitch} = viewport\n\n    this.setState({\n      mapData: {...this.state.mapData, latitude, longitude, zoom, bearing, pitch}\n    })\n  }\n  renderSource() {\n    return (\n      this.state.loaded &&\n      <Source {...this.state.sourceData}> \n        <Layer {...this.state.layerData}/>\n      </Source>\n    )\n  }\n  renderTooltip() {\n    const {hoveredFeature} = this.state;\n\n    return (\n      hoveredFeature && (\n        <Popup {...this.state.popupData} >\n            <div>Confirmed cases: <b>{hoveredFeature.properties.value}</b></div>\n            <div>Country: <b>{hoveredFeature.properties.country}</b></div>\n            {hoveredFeature.properties.province && <div>State: <b>{hoveredFeature.properties.province}</b></div>}\n        </Popup>\n      )\n    )\n  }\n  hoverHandler(event) {\n    const {\n        features,\n        lngLat: [longitude, latitude]\n      } = event,\n      hoveredFeature = features && features.find(f => f.layer.id === 'points')\n    \n    this.setState({hoveredFeature, popupData: {...this.state.popupData, longitude, latitude}})\n  }\n  async loadData() {\n    const res = await fetch('https://coronavirus-tracker-api.herokuapp.com/confirmed')\n    let json\n\n    if (res.ok) json = await res.json()\n\n    const features = json.locations.map(item => ({type: 'Feature', properties: {value: +item.latest, country: item.country, province: item.province}, geometry: {type: 'Point', coordinates: [item.coordinates.long, item.coordinates.lat]}})),\n          geojson = {\n            type: 'FeatureCollection',\n            features\n          }\n          \n    this.setState({\n      sourceData: {\n        type: 'geojson',\n        data: geojson\n      },\n      loaded: true\n    })\n  }\n  componentDidMount() {\n    this.loadData()\n  }\n  render() {\n    return (\n      <ReactMapGL {...this.state.mapData}>\n        <GeolocateControl trackUserLocation={false} {...this.state.geolocateControlData}/>\n        {this.renderSource()}\n        {this.renderTooltip()}\n      </ReactMapGL>\n    )\n  }\n}","import React from 'react'\nimport {Map} from './components/Map'\n\nfunction App() {\n  return (\n    <Map />\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\n// import 'mapbox-gl/dist/mapbox-gl.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}